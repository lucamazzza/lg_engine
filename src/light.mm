#include "light.h"

#include "common.h"

constexpr int MTL_MAX_LIGHTS = 8;
int Light::next_light_id = 0;

/**
 * Creates a new instance of Light with default color values and assigns it a unique light ID.
 * The light is enabled in OpenGL if the maximum number of lights has not been reached.
 * 
 * IDs are autogenerated starting from 0 up to 8.
 * 
 * Default color values:
 * * Ambient Color: (0.0, 0.0, 0.0) [Black]
 * * Diffuse Color: (1.0, 1.0, 1.0) [White]
 * * Specular Color: (1.0, 1.0, 1.0) [White]
 */
ENG_API Light::Light() : Node() {
	int max_num_lights = MTL_MAX_LIGHTS;
	Light::next_light_id++;
	this->light_id = Light::next_light_id % max_num_lights;
	DEBUG("Light %d/%d created", this->light_id, max_num_lights);
	if (this->light_id >= max_num_lights) {
		WARNING("Maximum number of lights reached (%d)", max_num_lights);
		return;
	}
	this->set_ambient_color(glm::vec3(0.0f, 0.0f, 0.0f));
	this->set_diffuse_color(glm::vec3(1.0f, 1.0f, 1.0f));
	this->set_specular_color(glm::vec3(1.0f, 1.0f, 1.0f));
}

/**
 * Retrieves the priority of the light for rendering order.
 * Lights have a high priority to ensure they are processed before other objects (100).
 * 
 * @return An integer representing the priority of the light.
 */
int ENG_API Light::get_priority() const {
	return 100; // Lights have high priority
}

/**
 * Sets the ambient color of the light.
 * 
 * @param color A glm::vec3 representing the ambient color (RGB).
 */
void ENG_API Light::set_ambient_color(const glm::vec3 color) {
	this->ambient_color = color;
}

/**
 * Sets the diffuse color of the light.
 * 
 * @param color A glm::vec3 representing the diffuse color (RGB).
 */
void ENG_API Light::set_diffuse_color(const glm::vec3 color) {
	this->diffuse_color = color;
}

/**
 * Sets the specular color of the light.
 * 
 * @param color A glm::vec3 representing the specular color (RGB).
 */
void ENG_API Light::set_specular_color(const glm::vec3 color) {
	this->specular_color = color;
}

/**
 * Returns the internal light ID.
 *
 * @note this function is useless in Metal, it is kept just to keep the compatibility with the common headers
 * 
 * @param light_id The internal light ID (0-based index).
 * @return The corresponding light index .
 */
int ENG_API Light::get_current_light(const int light_id) const {
	return light_id;
}
